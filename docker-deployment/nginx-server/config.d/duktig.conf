# Duktig Microservices API Gateway
# @author David A. <framework@duktig.solutions>

server {

    server_name duktig.api;

    client_max_body_size 30M;

    access_log /var/log/nginx/duktig.api.access.log;
    error_log /var/log/nginx/duktig.api.error.log;

    # Deny Some of file types to download
    location ~ \.(cache|ini|log|lg|sql)$ {
        deny all;
    }

    # Deny files starting with .ht (like .htaccess)
    location ~ /\.ht {
        deny all;
    }

    # Access is grunted to public zone
    location /public/ {
        proxy_pass http://duktig.public;
    }

    # In Testing environment the Development area is public
    # Warning! Remember to comment this location in production environment
    location /dev/ {
        proxy_pass http://duktig.development;
    }

    # Signup service
    location /account/signup/ {
        proxy_pass http://duktig.microservice/signup;
    }

    location /account/signin/ {
        proxy_pass http://duktig.microservice/signin;
    }

    # Main API gateway
    location / {

        # Initialize Authorization plugin
        # This will pass any request to /auth
        auth_request     /auth;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_header $upstream_http_authorization;

        # This initializes Header value "X-Account-Info" sent by Authorization service (/auth) after auth verification
        # This header value will set user information for next microservices use.
        # Each microservice can handle "X-Account-Info' and use user account Id and/or other data to perform operations
        auth_request_set $account_info $upstream_http_x_account_info;
        proxy_set_header X-Account-Info $account_info;

        # Remove/Hide the Original "Authtoken" Header value from client to given microservice
        proxy_set_header Authtoken "";

        # Get Host from Auth
        auth_request_set $micro_host_info $upstream_http_x_micro_host_info;
        proxy_set_header X-Micro-Host-Info $micro_host_info;
        location / {

            # Pass this IP address to proxy, so assuming this proxy only accept connections on this IP.
            # proxy_bind 127.0.0.1;
            # Or you can ping the current server address
            # proxy_bind $server_addr;

            proxy_pass $micro_host_info;
        }

        # Catch all the rest
        return 404;

    }

    # Authorization service
    location = /auth {

        # This is internal resource and visible only for this call.
        internal;

        access_log /var/log/nginx/duktig.auth.access.log;
        error_log /var/log/nginx/duktig.auth.error.log;

        # Check if token is empty
        # The "$http_auth_token" comes from header
        # In headers it was set as: auth_token
        #if ($http_x_authtoken="") {
      	#    # Unauthorized
        #    #default_type application/json;
        #    return 500 '{"status":401,"message":"___ this is in header checking ___ Unauthorized"}\n';
        #}

        proxy_pass http://duktig.microservice/auth/;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header X-Real-IP $remote_addr;

    }

    # Error responses in Json format for REST API
    error_page 400 = @400;
    location @400 {
        default_type application/json;
        return 400 '{"status":400,"message":"Bad request"}\n';
    }

    error_page 401 = @401;
    location @401 {
        default_type application/json;
        return 401 '{"status":401,"message":"Unauthorized"}\n';
    }

    error_page 403 = @403;
    location @403 {
        default_type application/json;
        return 403 '{"status":403,"message":"Forbidden"}\n';
    }

    error_page 404 = @404;
    location @404 {
        default_type application/json;
        return 404 '{"status":404,"message":"Resource not found"}\n';
    }

    error_page 500 = @500;
    location @500 {
        default_type application/json;
        return 500 '{"status":500,"message":"Internal Server Error"}\n';
    }

}
